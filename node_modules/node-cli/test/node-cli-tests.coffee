chai = require 'chai'
sinon = require 'sinon'

{Cli} = require '../src/node-cli'

chai.should()


describe 'node-cli instantiation', ->

  it 'should be able to receive args as an array', ->
    expected = [1,2,3,4,5]
    cli = new Cli expected
    cli.should.have.property('arguments')
    cli.arguments.should.equal expected

  it 'should use process.argv if no argument is passed to constructor', ->
    cli = new Cli
    cli.should.have.property('arguments')


describe 'Receive count of arguments', ->

  it 'should return correct count if an args array is passed', ->
    args = ['Foo','Bar','3', '4']
    expected = 4
    cli = new Cli args
    cli.getArgumentCount().should.equal expected

  it 'should return correct argument count if process.argv is used', ->
    expected = process.argv.length-2 
    cli = new Cli
    cli.getArgumentCount().should.equal expected 

describe 'hasArguments', ->

  it 'should return true if there is any argument', ->
    cli = new Cli ['1']
    cli.hasArguments().should.be.true

  it 'should return false if no arguments are present', ->
    cli = new Cli []
    cli.hasArguments().should.be.false

describe 'contains', ->

  it 'should return true if passed expression is existing', ->
    args = ['Hello World', '--compiler', 'coffee:coffee-script']
    cli = new Cli args
    cli.contains('compiler').should.be.true

  it 'should return false if value is not present', ->
    args = ['Hello World', '--compiler', 'coffee:coffee-script']
    cli = new Cli args
    cli.contains('compil0r').should.be.false

  it 'should return false if expression is given as substring, if user asks for exlicit match', ->
    args = ['Hello World', '--compiler', 'coffee:coffee-script']
    cli = new Cli args
    cli.contains('compiler', true).should.be.false

  it 'should return true if expression is given as single argument value if user asks for exlicit match', ->
    args = ['Hello World', '--compiler', 'coffee:coffee-script']
    cli = new Cli args
    cli.contains('--compiler', true).should.be.true

describe 'get argument at', ->

  it "should return the expected argument based on it's index", ->
    args = ['Hello World', '--compiler', 'coffee:coffee-script']
    cli = new Cli args
    cli.getArgumentAt(0).should.equal args[0]
    cli.getArgumentAt(1).should.equal args[1]
    cli.getArgumentAt(2).should.equal args[2]

  it 'should throw an error if index is out of range', ->
    args = ['Hello World', '--compiler', 'coffee:coffee-script']
    cli = new Cli args
    fn = () ->
      cli.getArgumentAt(10)
    fn.should.throw(Error)
describe 'getArgumentValue', ->

  it "should examine an argument for the given delimiter and return only the 'value' of that argument", ->
    args = ['name=Thorsten', 'lastname=Hans']
    cli = new Cli args
    cli.getArgumentValue('name','=').should.equal 'Thorsten'

  it 'should use = as default delimiter', ->
    args = ['name=Thorsten', 'lastname=Hans']
    cli = new Cli args
    cli.getArgumentValue('name').should.equal 'Thorsten'
    cli.getArgumentValue('lastname').should.equal 'Hans'

  it 'should return correct value when custom delimiter is passed', ->
    args = ['name:Thorsten', 'lastname:Hans']
    cli = new Cli args
    cli.getArgumentValue('name', ':').should.equal 'Thorsten'
    cli.getArgumentValue('lastname', ':').should.equal 'Hans'