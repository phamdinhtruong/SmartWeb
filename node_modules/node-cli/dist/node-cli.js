(function() {
  'use strict';
  var Cli, root;

  Cli = (function() {
    function Cli(args) {
      var processArgs;
      processArgs = process.argv.slice();
      processArgs.shift();
      processArgs.shift();
      this["arguments"] = args != null ? args : processArgs;
    }

    Cli.prototype.getArgumentCount = function() {
      return this["arguments"].length;
    };

    Cli.prototype.hasArguments = function() {
      return this["arguments"].length > 0;
    };

    Cli.prototype.contains = function(value, useExplicitMatch) {
      var expression, found;
      if (useExplicitMatch == null) {
        useExplicitMatch = false;
      }
      expression = function(x, y) {
        return x === y || x.indexOf(y) > -1;
      };
      if (useExplicitMatch) {
        expression = function(x, y) {
          return x === y;
        };
      }
      found = this["arguments"].filter(function(x) {
        return expression(x, value);
      });
      return found.length > 0;
    };

    Cli.prototype.getArgumentAt = function(index) {
      if (index < 0 || index > this["arguments"].length - 1) {
        throw new Error('Index out of range');
      }
      return this["arguments"][index];
    };

    Cli.prototype.getArgumentValue = function(key, delimiter) {
      var results, values, _ref;
      if (delimiter == null) {
        delimiter = '=';
      }
      results = this["arguments"].filter(function(x) {
        return x.indexOf("" + key + delimiter) === 0;
      });
      values = results[0].split(delimiter);
      return (_ref = values[1]) != null ? _ref : '';
    };

    return Cli;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Cli = Cli;

}).call(this);
